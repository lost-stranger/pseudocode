 Questions

1> Write pseudocode for bubble sort.

Pseudocode

function  bubbleSort(items) 
 
 SET swap to FALSE
  FOR i start from 0 as FIRST INDEX to the LAST INDEX under the length of the collection
   IF items[i] > items[i + 1] THEN
         SET tmp to items[i]
         SET items[i] to items[i + 1]
         SET items[i + 1] to tmp
         SET swap to true
   END IF
  END FOR  
 CONTINUE UNTIL swap turns to false  
 RETURN items
END FUNCTION  

Implementation:

function bubbleSort(items){
    let len = items.length;
    let swapped;

    do {
        swapped = false;
        for (let i = 0; i < len; i++) {
            if (items[i] > items[i + 1]) {
                let tmp = items[i];
                items[i] = items[i + 1];
                items[i + 1] = tmp;
                swapped = true;
            }
        }
    } while (swapped);
    return items;
};

console.log(bubbleSort(items));
====================================================================================

2.Write pseudocode for quicksort.

function quickSort(array)
 IF the array length is less than 1 THEN
  RETURN array

 SET an element in the array as pivot - pivot

 CREATE a new empty array to store items on the left of pivot - left
 CREATE a new empty array to store items on the right of pivot - right

 FOR i which is the FIRST INDEX of array upto the LAST INDEX of array
  IF element at i INDEX is less that the pivot THEN
    PUSH the element at i INDEX into the LEFT array
   ELSE PUSH the element at i INDEX into the RIGHT array
  END IF
 END FOR

 RECURSION
 REPEAT the process on the left and right of the pivot and join the results
 RETURN the result

Implementation:

function quickSort(array) {
  if (array.length <= 1) {
    return array;
  }

  var pivot = array[0];                                              
  
  var left = []; 
  var right = [];

  for (var i = 1; i < array.length; i++) {                             
    array[i] < pivot ? left.push(array[i]) : right.push(array[i]);     
  }

  return quicksort(left).concat(pivot, quicksort(right));               
};

var unsorted = ['s','g','w','f','g','s','a','o','b','z','t','f'];
var sorted = quickSort(unsorted);

console.log(sorted);
=====================================================================================================

3. We talked about time complexity in a previous checkpoint, and how to get an idea of the efficiency of an algorithm. 

> After looking at the pseudocode for the above sorting methods, identify why merge sort and quick sort are much more efficient than the others. 
Walking through each algorithm with a few sample collections may help.

The best case time complexity for Quick Sort is O(n log(n)) when the pivot position in the centre. The worst case is O(n^2) in a sorted array. 
The worst case time complexity for  merge sort is O(n log(n)). While the above two sort functions grows in time complexity with the number of elements. The sorting is done by halving the 
elements, hence the log-linear growth rate.

4. All of the sorts addressed in this checkpoint are known as comparison sorts. Research bucket sort and explain how it works. What is the ideal input for bucket sort?

> Bucket Sort works by distributing the elements of an array into a number of buckets. Each bucket is then sorted individually, 
either using a different sorting algorithm, or by recursively applying the bucket sorting algorithm. Buckrt sort is best applied when the input is uniformly distributed over a range. 





 

