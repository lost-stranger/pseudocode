Questions:

1. What is a hash table?

A> Hash table is a type of data structure that maps each value to a unique key and then stores the key-value pair. 
The key which is a string is then converted to a number using the hashing function creating a hash code. 
The hash code is then used to store the key-value pair in the has table's internal array.

2. What is hashing?

A> Hashing is the process of converting a string to number through a mathematical process. String keys are converted to numbers creating hash codes by hashing function.

3. How does a hash table store data?

A> Hash tables store data by taking the value to be stored, mapped to an identifier/key, and then storing the key-value pair. It does so through the following steps:
1) It takes the key and converts to a Hash Code using a Hashing Function.
2) To get the true index of the value in the arrray, mod the Hash Code by the capacity of the hasing function.
4) Store the Value in the Array Index.

3. How are hash tables and objects different?

A> Certain programs allow both objects and hash tables and they can be used interchangeably - the prperty of an object can be used as a key to store as key-value pair in a Hash Table and vice versa.
It is preferable to use object as data stucture if data consists of a static number of distince values. If the data consists of a variable number consistently formatted values with a unique
identifier, then hash tables is othe preferred data structure.

5. Determine whether you would use a hash table or an object to store each of the following pieces of data:

a) A list of pets and their unique names - hash table
b) The name, age, and the birthday of your best friend - object
c) The name and location of every company in a given city - hash table
d) All of the books checked out from a library by a particular individual - hash table
e) The primary and secondary phone numbers for a contact - object

6), 7), 8)

class hashTable {
  constructor() {
    this.container = new Array(16).fill(null);
  }

  hash(k) {
    return k.split('').map(x => x.charCodeAt(0)).reduce((x, y) => x+y);
  }

  set(key, value) {
    let index = this.hash(JSON.stringify(key)) % this.container.length;
    if (this.container[index] === null || this.container[index].key === key) {
      this.container[index] = {key: key, value: value};
    } else {
      this.resize();
      this.set(key, value);
    }
  }

  get(key) {
    let index = this.hash(JSON.stringify(key)) % this.container.length;
    return this.container[index].value;
  }

  resize() {
    let old = this.container;
    this.container = new Array(2*old.length).fill(null);

    old.map((x) => {
      if (x !== null) {
        this.set(x.key, x.value);
      }
    });
  }
}

//6. Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. 
Store this information in a hash table.//

var salesSystem = new hashTable();
salesSystem.set({phoneNumber: '3759193923'},
{name:'Rebecca',
address:'123 Allston St',
phoneNumber:'3759193923'});

console.log(salesSystem.get({phoneNumber: '3759193923'}));

//7.Build a system that allows a store owner to track their store's inventory using a hash table for storage.//

var invSys = new hashTable();
invSys.set({Item: 'rice'}, {Quantity: '20', Location: 'A-15'});
console.log(invSys.get({Item: 'rice'}));

//8.Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.//
	
var newsSys = new hashTable();
newsSys.set({Name:'Globe & Mail', Date: '01/01/2019'}, {Name: 'Globe & Mail', Date: '01/01/2018', Article: 'blah'});
console.log(newsSys.get({Name:'Globe & Mail', Date: '01/01/2019'}));









 

 