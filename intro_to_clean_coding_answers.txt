
1) In your own words, explain what clean code is and why it is important.

Clean code is one that is easy to understand whether by the author or another developer; and a code that is easy to maintain and change. 
Writing clean code makes it easier to work with the code in the future for the author and other developers. It  would reduce the time, effort and cost required to work with the code in 
the future and reduce the risks associated with the code stemming from developers not understanding the code and thus leading to unintended consequences.

2) Think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

Airplanes today have embedded ECAS (Emergency Close Air Support) to prevent mid-air collisions. The ECAS system of a plance communicates with that of another plane in the vicinity. If 
the planes are close with a risk of impending collision, there is inter-ECAS communication and then they warn their respective flight crews and provide appropriate coordinates to 
move each plane away from each other. If there is a bug in the systems that leads to a malfunction in determining the appropriate coordinates, and makes air travel less safe.
Other examples include traffic signals, banking softwares that execute fund transfers and account management, etc.

3) Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

The code is not clean as detailed in the commments. Right at outset, it appears that the detailed description provided in comments is unnecesary as the function is simple enough to be explainable without it through clean code. 

FUNCTION do(x, y)               // Creating a new function - [the function description is unclear and does not explain the intended application]
 IF y = "F" THEN               // Check if y is equal "F" - [the '=' sign is used to assign value to a variable and not for comparison ('==') and hence is confusing. The pseudoCode does not explain that 'F' stands for farenheit]
 SET z to (x-32) * (5/9)       // Formula to convert degrees fahrenheit to celsius - [does not explain that 'z' is the result variable]
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C" - [issue with the '=' sign as above.]
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit - [1.8000 can be written as 1.8 -  more readable]
 PRINT z                       // Print result
 END IF
END FUNCTION
================================================================
Refactored pseudoCode

FUNCTION convertTemp(
 INPUT x as the number value of the temperature that is to be converted,
 INPUT y the metric value of the teperature to be converted denoted as F for farenheit and C for celcius)

 IF y is equal to F THEN
 PRINT convertToCelc(x)+' C'

 IF y is equal to C THEN
 PRINT convertToFarenheit(x)+' F'

 ELSE PRINT 'Invalid entry'
 
 END IF

END FUNCTION

FUNCTION convertToCelc(
 INPUT x as the number to be converted)
 INIT Result variable to store result
 Result is set to (x-32) * (5/9)
 RETURN Result
END FUNCTION


FUNCTION convertToFarenheit(
 INPUT x as the number to be converted)
 INIT Result variable to store result
 Result is set to x * 1.8 + 32.00 
 RETURN Result
END FUNCTION
====================================================================

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.
The code is largely clean, but can be refactored as follows:

original

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

refactored

FUNCTION calcPercent(sum, total)
 INIT percentage to store result              //explained variable percentage
 IF (total is not equal to 0) THEN            //simplified by removing the confusing '=' sign which means SET, but was used to denote EQUAL
     SET percentage to (sum / total) * 100    //corrected the formula
 ELSE
   PRINT "Sorry, cannot divide sum by 0"      //clearer expression
 END IF

 PRINT percentage
END FUNCTION

==========================================================================
5. a)
Original

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

Refactored

SET variable TOTAL to the following function
 FUNCTION calculateTotal(subTotal, discountRate, taxRate)
    INIT result and SET to subTotal * discountRate + (subTotal * taxRate)
    RETURN result
 END FUNCTION

FUNCTION checkOutCustomer()
   PRINT "Your total due is: " + TOTAL
END FUNCTION

FUNCTION chargeCustomer(paymentType) 

 IF paymentType = 'CASH' THEN
   CALL getPayment RETURNING amount
   PRINT:"Change due: " + amount - TOTAL

   ELSE IF paymentType = 'CREDIT CARD' THEN
       PRINT "Your credit card has been charged: " + TOTAL

   END IF
END FUNCTION
======================================================================================================================================================  

5.b) Original
FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

Refactored

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND guest.hasOverdueBooks is not TRUE AND guest.outstandingFees == 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION
=====================================================================================================================================================

5.d) Original
CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

Refactored

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

CLASS offerBankProducts

FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

....
 ....
 ....

END
========================================================================================================================

PROGRAMMING QUESTIONS:

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

CODE:

var x = [1,2,3,3,1,2,2,2];

function checkPerfSquare(x){
  var sum = x.reduce((sum, item) => sum + item);
  var sqrt = Math.sqrt(sum); 
  
  if(sqrt === Math.floor(sqrt)) {return sqrt;}
    else {return sum;} 
}
===========================================================================================================================

7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

CODE:
var x = [1,2,3,8,4,5,6,7];

function isDuplicate(x){
  
  var dupCheck=false; 
  
  for (let i = 0; i<x.length; i++){
    for (let j = i+1;  j<x.length; j++){
      if(x[i] == x[j]) {dupCheck = true;}       
    }
  }
  return dupCheck;  
}
==========================================================================================================================

8. Anagram An anagram is a word, phrase, or name formed by rearranging the letters of another word. For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, determine if stringOne is an anagram of stringTwo. Assume that the strings contain only lowercase letters and do not worry about case-sensitivity. Hint: Your first task will be to convert the strings to arrays.

var x = 'arunrun';
var y = 'arunrun';

function isAnagram(x,y){
  var xarr = x.split('').sort().join().trim(); //string converted to array, elements sorted alphabetically and joined back as string
  var yarr = y.split('').sort().join().trim();
  
  if (xarr === yarr) {return true;}
  else {return false;}
}

console.log(isAnagram(x,y));
=========================================================================================================================




